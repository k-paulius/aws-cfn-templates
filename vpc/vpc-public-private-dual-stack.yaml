# Copyright (c) 2024 k-paulius
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

AWSTemplateFormatVersion: 2010-09-09
Description: 'VPC Template'

Parameters:

  pVPCName:
    Description: 'Name of the VPC'
    Type: String
    ConstraintDescription: 'VPC name must only contain uppercase and lowercase letters and numbers, and be less than 40 characters long'
    AllowedPattern: '[A-Za-z0-9]+'
    MinLength: 1
    MaxLength: 40

  pIPv4Block:
    Description: 'Second Octet of the VPC network (10.xxx.0.0/16)'
    Type: Number
    Default: 16
    ConstraintDescription: 'Second Octet of the VPC network must be between 0 and 255'
    MinValue: 0
    MaxValue: 255

  pNumberOfAZs:
    Description: 'Number of Availability Zones (AZs) to use: 1, 2, or 3.'
    Type: Number
    Default: 2
    MinValue: 1
    MaxValue: 3

  pEnable2ndPrivateSubnetTier:
    Description: 'Enable a second tier of private subnets, adding an additional private subnet in each Availability Zone (AZ).'
    Type: String
    Default: false
    AllowedValues:
      - true
      - false

  p1stPrivateSubnetTierName:
    Description: 'Name of the first private subnet tier (e.g., t1, app)'
    Type: String
    Default: 't1'
    ConstraintDescription: 'Name of the first private subnet tier must only contain uppercase and lowercase letters and numbers, and be less than 10 characters long'
    AllowedPattern: '[A-Za-z0-9]+'
    MinLength: 1
    MaxLength: 10

  p2ndPrivateSubnetTierName:
    Description: 'Name of the second private subnet tier (e.g., t2, db)'
    Type: String
    Default: 't2'
    ConstraintDescription: 'Name of the second private subnet tier must only contain uppercase and lowercase letters and numbers, and be less than 10 characters long'
    AllowedPattern: '[A-Za-z0-9]+'
    MinLength: 1
    MaxLength: 10

  pWorkloadIdTag:
    Description: 'Workload Id (value used in the "workload-id" tag)'
    Type: String
    AllowedPattern: '[a-zA-Z0-9\-_]+'
    ConstraintDescription: 'Workload Id value must contain only alphanumeric characters, hyphens, and underscores'

  pEnvironmentIdTag:
    Description: 'Environment Id (value used in the "environment-id" tag)'
    Type: String
    AllowedPattern: '[a-zA-Z0-9\-_]+'
    ConstraintDescription: 'Environment Id value must contain only alphanumeric characters, hyphens, and underscores'

  pOwnerNameTag:
    Description: 'Owner Name (value used in the "owner" tag)'
    Type: String
    AllowedPattern: '[a-zA-Z0-9\-_]+'
    ConstraintDescription: 'Owner name value must contain only alphanumeric characters, hyphens, and underscores'

Conditions:

  cIsUSEast1Region: !Equals [!Ref 'AWS::Region', 'us-east-1']
  cIs2ndAZEnabled: !Or [!Equals [!Ref pNumberOfAZs, '2'], !Equals [!Ref pNumberOfAZs, '3']]
  cIs3rdAZEnabled: !Equals [!Ref pNumberOfAZs, '3']
  cIs2ndPrivateTier1stAZEnabled: !Equals [!Ref pEnable2ndPrivateSubnetTier, 'true']
  cIs2ndPrivateTier2ndAZEnabled: !And [!Condition cIs2ndPrivateTier1stAZEnabled, !Condition cIs2ndAZEnabled]
  cIs2ndPrivateTier3rdAZEnabled: !And [!Condition cIs2ndPrivateTier1stAZEnabled, !Condition cIs3rdAZEnabled]

Resources:

  rVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Sub '10.${pIPv4Block}.0.0/16'
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: 'Name'
          Value: !Ref pVPCName
        - Key: 'workload-id'
          Value: !Ref pWorkloadIdTag
        - Key: 'environment-id'
          Value: !Ref pEnvironmentIdTag
        - Key: 'owner'
          Value: !Ref pOwnerNameTag

  rVPCCidrBlock:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      AmazonProvidedIpv6CidrBlock: true
      VpcId: !Ref rVPC

  rDHCPOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName: !If [cIsUSEast1Region, 'ec2.internal', 'compute.internal']
      DomainNameServers: [AmazonProvidedDNS]
      Tags:
        - Key: Name
          Value: !Sub '${pVPCName}-dhcpos'
        - Key: 'workload-id'
          Value: !Ref pWorkloadIdTag
        - Key: 'environment-id'
          Value: !Ref pEnvironmentIdTag
        - Key: 'owner'
          Value: !Ref pOwnerNameTag

  rVPCDHCPOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      DhcpOptionsId: !Ref rDHCPOptions
      VpcId: !Ref rVPC

  rSubnetPublicA:
    DependsOn: rVPCCidrBlock
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Select [0, !Cidr [!GetAtt 'rVPC.CidrBlock', 9, 12]]
      Ipv6CidrBlock: !Select [0, !Cidr [!Select [0, !GetAtt 'rVPC.Ipv6CidrBlocks'], 9, 64]]
      MapPublicIpOnLaunch: false
      AssignIpv6AddressOnCreation: false
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Sub '${pVPCName}-sn-public-a'
        - Key: 'workload-id'
          Value: !Ref pWorkloadIdTag
        - Key: 'environment-id'
          Value: !Ref pEnvironmentIdTag
        - Key: 'owner'
          Value: !Ref pOwnerNameTag

  rSubnetPrivateA1:
    DependsOn: rVPCCidrBlock
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Select [1, !Cidr [!GetAtt 'rVPC.CidrBlock', 9, 12]]
      Ipv6CidrBlock: !Select [1, !Cidr [!Select [0, !GetAtt 'rVPC.Ipv6CidrBlocks'], 9, 64]]
      MapPublicIpOnLaunch: false
      AssignIpv6AddressOnCreation: false
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Sub '${pVPCName}-sn-private-${p1stPrivateSubnetTierName}-a'
        - Key: 'workload-id'
          Value: !Ref pWorkloadIdTag
        - Key: 'environment-id'
          Value: !Ref pEnvironmentIdTag
        - Key: 'owner'
          Value: !Ref pOwnerNameTag

  rSubnetPrivateA2:
    DependsOn: rVPCCidrBlock
    Condition: cIs2ndPrivateTier1stAZEnabled
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Select [6, !Cidr [!GetAtt 'rVPC.CidrBlock', 9, 12]]
      Ipv6CidrBlock: !Select [6, !Cidr [!Select [0, !GetAtt 'rVPC.Ipv6CidrBlocks'], 9, 64]]
      MapPublicIpOnLaunch: false
      AssignIpv6AddressOnCreation: false
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Sub '${pVPCName}-sn-private-${p2ndPrivateSubnetTierName}-a'
        - Key: 'workload-id'
          Value: !Ref pWorkloadIdTag
        - Key: 'environment-id'
          Value: !Ref pEnvironmentIdTag
        - Key: 'owner'
          Value: !Ref pOwnerNameTag

  rSubnetPublicB:
    DependsOn: rVPCCidrBlock
    Condition: cIs2ndAZEnabled
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Select [2, !Cidr [!GetAtt 'rVPC.CidrBlock', 9, 12]]
      Ipv6CidrBlock: !Select [2, !Cidr [!Select [0, !GetAtt 'rVPC.Ipv6CidrBlocks'], 9, 64]]
      MapPublicIpOnLaunch: false
      AssignIpv6AddressOnCreation: false
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Sub '${pVPCName}-sn-public-b'
        - Key: 'workload-id'
          Value: !Ref pWorkloadIdTag
        - Key: 'environment-id'
          Value: !Ref pEnvironmentIdTag
        - Key: 'owner'
          Value: !Ref pOwnerNameTag

  rSubnetPrivateB1:
    DependsOn: rVPCCidrBlock
    Condition: cIs2ndAZEnabled
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Select [3, !Cidr [!GetAtt 'rVPC.CidrBlock', 9, 12]]
      Ipv6CidrBlock: !Select [3, !Cidr [!Select [0, !GetAtt 'rVPC.Ipv6CidrBlocks'], 9, 64]]
      MapPublicIpOnLaunch: false
      AssignIpv6AddressOnCreation: false
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Sub '${pVPCName}-sn-private-${p1stPrivateSubnetTierName}-b'
        - Key: 'workload-id'
          Value: !Ref pWorkloadIdTag
        - Key: 'environment-id'
          Value: !Ref pEnvironmentIdTag
        - Key: 'owner'
          Value: !Ref pOwnerNameTag

  rSubnetPrivateB2:
    DependsOn: rVPCCidrBlock
    Condition: cIs2ndPrivateTier2ndAZEnabled
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Select [7, !Cidr [!GetAtt 'rVPC.CidrBlock', 9, 12]]
      Ipv6CidrBlock: !Select [7, !Cidr [!Select [0, !GetAtt 'rVPC.Ipv6CidrBlocks'], 9, 64]]
      MapPublicIpOnLaunch: false
      AssignIpv6AddressOnCreation: false
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Sub '${pVPCName}-sn-private-${p2ndPrivateSubnetTierName}-b'
        - Key: 'workload-id'
          Value: !Ref pWorkloadIdTag
        - Key: 'environment-id'
          Value: !Ref pEnvironmentIdTag
        - Key: 'owner'
          Value: !Ref pOwnerNameTag

  rSubnetPublicC:
    DependsOn: rVPCCidrBlock
    Condition: cIs3rdAZEnabled
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: !Select [4, !Cidr [!GetAtt 'rVPC.CidrBlock', 9, 12]]
      Ipv6CidrBlock: !Select [4, !Cidr [!Select [0, !GetAtt 'rVPC.Ipv6CidrBlocks'], 9, 64]]
      MapPublicIpOnLaunch: false
      AssignIpv6AddressOnCreation: false
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Sub '${pVPCName}-sn-public-c'
        - Key: 'workload-id'
          Value: !Ref pWorkloadIdTag
        - Key: 'environment-id'
          Value: !Ref pEnvironmentIdTag
        - Key: 'owner'
          Value: !Ref pOwnerNameTag

  rSubnetPrivateC1:
    DependsOn: rVPCCidrBlock
    Condition: cIs3rdAZEnabled
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: !Select [5, !Cidr [!GetAtt 'rVPC.CidrBlock', 9, 12]]
      Ipv6CidrBlock: !Select [5, !Cidr [!Select [0, !GetAtt 'rVPC.Ipv6CidrBlocks'], 9, 64]]
      MapPublicIpOnLaunch: false
      AssignIpv6AddressOnCreation: false
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Sub '${pVPCName}-sn-private-${p1stPrivateSubnetTierName}-c'
        - Key: 'workload-id'
          Value: !Ref pWorkloadIdTag
        - Key: 'environment-id'
          Value: !Ref pEnvironmentIdTag
        - Key: 'owner'
          Value: !Ref pOwnerNameTag

  rSubnetPrivateC2:
    DependsOn: rVPCCidrBlock
    Condition: cIs2ndPrivateTier3rdAZEnabled
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: !Select [8, !Cidr [!GetAtt 'rVPC.CidrBlock', 9, 12]]
      Ipv6CidrBlock: !Select [8, !Cidr [!Select [0, !GetAtt 'rVPC.Ipv6CidrBlocks'], 9, 64]]
      MapPublicIpOnLaunch: false
      AssignIpv6AddressOnCreation: false
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Sub '${pVPCName}-sn-private-${p2ndPrivateSubnetTierName}-c'
        - Key: 'workload-id'
          Value: !Ref pWorkloadIdTag
        - Key: 'environment-id'
          Value: !Ref pEnvironmentIdTag
        - Key: 'owner'
          Value: !Ref pOwnerNameTag

  rInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${pVPCName}-igw'
        - Key: 'workload-id'
          Value: !Ref pWorkloadIdTag
        - Key: 'environment-id'
          Value: !Ref pEnvironmentIdTag
        - Key: 'owner'
          Value: !Ref pOwnerNameTag

  rInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref rInternetGateway
      VpcId: !Ref rVPC

  rRouteTablePublicA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Sub '${pVPCName}-rtb-public-a'
        - Key: 'workload-id'
          Value: !Ref pWorkloadIdTag
        - Key: 'environment-id'
          Value: !Ref pEnvironmentIdTag
        - Key: 'owner'
          Value: !Ref pOwnerNameTag

  rRouteTablePublicB:
    Condition: cIs2ndAZEnabled
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Sub '${pVPCName}-rtb-public-b'
        - Key: 'workload-id'
          Value: !Ref pWorkloadIdTag
        - Key: 'environment-id'
          Value: !Ref pEnvironmentIdTag
        - Key: 'owner'
          Value: !Ref pOwnerNameTag

  rRouteTablePublicC:
    Condition: cIs3rdAZEnabled
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Sub '${pVPCName}-rtb-public-c'
        - Key: 'workload-id'
          Value: !Ref pWorkloadIdTag
        - Key: 'environment-id'
          Value: !Ref pEnvironmentIdTag
        - Key: 'owner'
          Value: !Ref pOwnerNameTag

  rRouteTablePrivateA1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Sub '${pVPCName}-rtb-private-${p1stPrivateSubnetTierName}-a'
        - Key: 'workload-id'
          Value: !Ref pWorkloadIdTag
        - Key: 'environment-id'
          Value: !Ref pEnvironmentIdTag
        - Key: 'owner'
          Value: !Ref pOwnerNameTag

  rRouteTablePrivateB1:
    Condition: cIs2ndAZEnabled
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Sub '${pVPCName}-rtb-private-${p1stPrivateSubnetTierName}-b'
        - Key: 'workload-id'
          Value: !Ref pWorkloadIdTag
        - Key: 'environment-id'
          Value: !Ref pEnvironmentIdTag
        - Key: 'owner'
          Value: !Ref pOwnerNameTag

  rRouteTablePrivateC1:
    Condition: cIs3rdAZEnabled
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Sub '${pVPCName}-rtb-private-${p1stPrivateSubnetTierName}-c'
        - Key: 'workload-id'
          Value: !Ref pWorkloadIdTag
        - Key: 'environment-id'
          Value: !Ref pEnvironmentIdTag
        - Key: 'owner'
          Value: !Ref pOwnerNameTag

  rRouteTablePrivateA2:
    Condition: cIs2ndPrivateTier1stAZEnabled
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Sub '${pVPCName}-rtb-private-${p2ndPrivateSubnetTierName}-a'
        - Key: 'workload-id'
          Value: !Ref pWorkloadIdTag
        - Key: 'environment-id'
          Value: !Ref pEnvironmentIdTag
        - Key: 'owner'
          Value: !Ref pOwnerNameTag

  rRouteTablePrivateB2:
    Condition: cIs2ndPrivateTier2ndAZEnabled
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Sub '${pVPCName}-rtb-private-${p2ndPrivateSubnetTierName}-b'
        - Key: 'workload-id'
          Value: !Ref pWorkloadIdTag
        - Key: 'environment-id'
          Value: !Ref pEnvironmentIdTag
        - Key: 'owner'
          Value: !Ref pOwnerNameTag

  rRouteTablePrivateC2:
    Condition: cIs2ndPrivateTier3rdAZEnabled
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Sub '${pVPCName}-rtb-private-${p2ndPrivateSubnetTierName}-c'
        - Key: 'workload-id'
          Value: !Ref pWorkloadIdTag
        - Key: 'environment-id'
          Value: !Ref pEnvironmentIdTag
        - Key: 'owner'
          Value: !Ref pOwnerNameTag

  rRouteTableAssociationPublicA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rRouteTablePublicA
      SubnetId: !Ref rSubnetPublicA

  rRouteTableAssociationPublicB:
    Condition: cIs2ndAZEnabled
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rRouteTablePublicB
      SubnetId: !Ref rSubnetPublicB

  rRouteTableAssociationPublicC:
    Condition: cIs3rdAZEnabled
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rRouteTablePublicC
      SubnetId: !Ref rSubnetPublicC

  rRouteTableAssociationPrivateA1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rRouteTablePrivateA1
      SubnetId: !Ref rSubnetPrivateA1

  rRouteTableAssociationPrivateB1:
    Condition: cIs2ndAZEnabled
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rRouteTablePrivateB1
      SubnetId: !Ref rSubnetPrivateB1

  rRouteTableAssociationPrivateC1:
    Condition: cIs3rdAZEnabled
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rRouteTablePrivateC1
      SubnetId: !Ref rSubnetPrivateC1

  rRouteTableAssociationPrivateA2:
    Condition: cIs2ndPrivateTier1stAZEnabled
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rRouteTablePrivateA2
      SubnetId: !Ref rSubnetPrivateA2

  rRouteTableAssociationPrivateB2:
    Condition: cIs2ndPrivateTier2ndAZEnabled
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rRouteTablePrivateB2
      SubnetId: !Ref rSubnetPrivateB2

  rRouteTableAssociationPrivateC2:
    Condition: cIs2ndPrivateTier3rdAZEnabled
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rRouteTablePrivateC2
      SubnetId: !Ref rSubnetPrivateC2

  rRouteTablePublicAInternetRouteIPv4:
    Type: AWS::EC2::Route
    DependsOn: rInternetGatewayAttachment
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref rInternetGateway
      RouteTableId: !Ref rRouteTablePublicA

  rRouteTablePublicBInternetRouteIPv4:
    Condition: cIs2ndAZEnabled
    Type: AWS::EC2::Route
    DependsOn: rInternetGatewayAttachment
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref rInternetGateway
      RouteTableId: !Ref rRouteTablePublicB

  rRouteTablePublicCInternetRouteIPv4:
    Condition: cIs3rdAZEnabled
    Type: AWS::EC2::Route
    DependsOn: rInternetGatewayAttachment
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref rInternetGateway
      RouteTableId: !Ref rRouteTablePublicC

  rRouteTablePublicAInternetRouteIPv6:
    Type: AWS::EC2::Route
    DependsOn: rInternetGatewayAttachment
    Properties:
      DestinationIpv6CidrBlock: '::/0'
      GatewayId: !Ref rInternetGateway
      RouteTableId: !Ref rRouteTablePublicA

  rRouteTablePublicBInternetRouteIPv6:
    Condition: cIs2ndAZEnabled
    Type: AWS::EC2::Route
    DependsOn: rInternetGatewayAttachment
    Properties:
      DestinationIpv6CidrBlock: '::/0'
      GatewayId: !Ref rInternetGateway
      RouteTableId: !Ref rRouteTablePublicB

  rRouteTablePublicCInternetRouteIPv6:
    Condition: cIs3rdAZEnabled
    Type: AWS::EC2::Route
    DependsOn: rInternetGatewayAttachment
    Properties:
      DestinationIpv6CidrBlock: '::/0'
      GatewayId: !Ref rInternetGateway
      RouteTableId: !Ref rRouteTablePublicC

  rNetworkAclPublic:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Sub '${pVPCName}-nacl-public'
        - Key: 'workload-id'
          Value: !Ref pWorkloadIdTag
        - Key: 'environment-id'
          Value: !Ref pEnvironmentIdTag
        - Key: 'owner'
          Value: !Ref pOwnerNameTag

  rNetworkAclPrivate:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Sub '${pVPCName}-nacl-private'
        - Key: 'workload-id'
          Value: !Ref pWorkloadIdTag
        - Key: 'environment-id'
          Value: !Ref pEnvironmentIdTag
        - Key: 'owner'
          Value: !Ref pOwnerNameTag

  rSubnetNetworkAclAssociationPublicA:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref rNetworkAclPublic
      SubnetId: !Ref rSubnetPublicA

  rSubnetNetworkAclAssociationPrivateA1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref rNetworkAclPrivate
      SubnetId: !Ref rSubnetPrivateA1

  rSubnetNetworkAclAssociationPrivateA2:
    Condition: cIs2ndPrivateTier1stAZEnabled
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref rNetworkAclPrivate
      SubnetId: !Ref rSubnetPrivateA2

  rSubnetNetworkAclAssociationPublicB:
    Condition: cIs2ndAZEnabled
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref rNetworkAclPublic
      SubnetId: !Ref rSubnetPublicB

  rSubnetNetworkAclAssociationPrivateB1:
    Condition: cIs2ndAZEnabled
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref rNetworkAclPrivate
      SubnetId: !Ref rSubnetPrivateB1

  rSubnetNetworkAclAssociationPrivateB2:
    Condition: cIs2ndPrivateTier2ndAZEnabled
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref rNetworkAclPrivate
      SubnetId: !Ref rSubnetPrivateB2

  rSubnetNetworkAclAssociationPublicC:
    Condition: cIs3rdAZEnabled
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref rNetworkAclPublic
      SubnetId: !Ref rSubnetPublicC

  rSubnetNetworkAclAssociationPrivateC1:
    Condition: cIs3rdAZEnabled
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref rNetworkAclPrivate
      SubnetId: !Ref rSubnetPrivateC1

  rSubnetNetworkAclAssociationPrivateC2:
    Condition: cIs2ndPrivateTier3rdAZEnabled
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref rNetworkAclPrivate
      SubnetId: !Ref rSubnetPrivateC2

  rNetworkAclEntryPublicDenySSHIPv4In:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: '0.0.0.0/0'
      Egress: false
      NetworkAclId: !Ref rNetworkAclPublic
      Protocol: 6
      PortRange:
        From: 22
        To: 22
      RuleAction: deny
      RuleNumber: 50

  rNetworkAclEntryPublicDenySSHIPv6In:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Ipv6CidrBlock: '::/0'
      Egress: false
      NetworkAclId: !Ref rNetworkAclPublic
      Protocol: 6
      PortRange:
        From: 22
        To: 22
      RuleAction: deny
      RuleNumber: 51

  rNetworkAclEntryPublicDenyRDPIPv4In:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: '0.0.0.0/0'
      Egress: false
      NetworkAclId: !Ref rNetworkAclPublic
      Protocol: 6
      PortRange:
        From: 3389
        To: 3389
      RuleAction: deny
      RuleNumber: 52

  rNetworkAclEntryPublicDenyRDPIPv6In:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Ipv6CidrBlock: '::/0'
      Egress: false
      NetworkAclId: !Ref rNetworkAclPublic
      Protocol: 6
      PortRange:
        From: 3389
        To: 3389
      RuleAction: deny
      RuleNumber: 53

  rNetworkAclEntryPublicAllowAllIPv4In:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: '0.0.0.0/0'
      Egress: false
      NetworkAclId: !Ref rNetworkAclPublic
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100

  rNetworkAclEntryPublicAllowAllIPv6In:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Ipv6CidrBlock: '::/0'
      Egress: false
      NetworkAclId: !Ref rNetworkAclPublic
      Protocol: -1
      RuleAction: allow
      RuleNumber: 101

  rNetworkAclEntryPublicAllowAllIPv4Out:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: '0.0.0.0/0'
      Egress: true
      NetworkAclId: !Ref rNetworkAclPublic
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100

  rNetworkAclEntryPublicAllowAllIPv6Out:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Ipv6CidrBlock: '::/0'
      Egress: true
      NetworkAclId: !Ref rNetworkAclPublic
      Protocol: -1
      RuleAction: allow
      RuleNumber: 101

  rNetworkAclEntryPrivateDenySSHIPv4In:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: '0.0.0.0/0'
      Egress: false
      NetworkAclId: !Ref rNetworkAclPrivate
      Protocol: 6
      PortRange:
        From: 22
        To: 22
      RuleAction: deny
      RuleNumber: 50

  rNetworkAclEntryPrivateDenySSHIPv6In:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Ipv6CidrBlock: '::/0'
      Egress: false
      NetworkAclId: !Ref rNetworkAclPrivate
      Protocol: 6
      PortRange:
        From: 22
        To: 22
      RuleAction: deny
      RuleNumber: 51

  rNetworkAclEntryPrivateDenyRDPIPv4In:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: '0.0.0.0/0'
      Egress: false
      NetworkAclId: !Ref rNetworkAclPrivate
      Protocol: 6
      PortRange:
        From: 3389
        To: 3389
      RuleAction: deny
      RuleNumber: 52

  rNetworkAclEntryPrivateDenyRDPIPv6In:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Ipv6CidrBlock: '::/0'
      Egress: false
      NetworkAclId: !Ref rNetworkAclPrivate
      Protocol: 6
      PortRange:
        From: 3389
        To: 3389
      RuleAction: deny
      RuleNumber: 53

  rNetworkAclEntryPrivateAllowAllIPv4In:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: '0.0.0.0/0'
      Egress: false
      NetworkAclId: !Ref rNetworkAclPrivate
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100

  rNetworkAclEntryPrivateAllowAllIPv6In:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Ipv6CidrBlock: '::/0'
      Egress: false
      NetworkAclId: !Ref rNetworkAclPrivate
      Protocol: -1
      RuleAction: allow
      RuleNumber: 101

  rNetworkAclEntryPrivateAllowAllIPv4Out:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: '0.0.0.0/0'
      Egress: true
      NetworkAclId: !Ref rNetworkAclPrivate
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100

  rNetworkAclEntryPrivateAllowAllIPv6Out:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Ipv6CidrBlock: '::/0'
      Egress: true
      NetworkAclId: !Ref rNetworkAclPrivate
      Protocol: -1
      RuleAction: allow
      RuleNumber: 101

  # override the default outbound rule in the default security group that allows all outbound traffic
  rDefaultSecurityGroupLimitEgressTraffic:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: 'Limit egress traffic'
      GroupId: !GetAtt rVPC.DefaultSecurityGroup
      CidrIp: '127.0.0.1/32'
      IpProtocol: -1

  rSecurityGroupNoIngressEgress:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${pVPCName}-sg-no-ingress-egress'
      GroupDescription: 'SG without ingress or egress rules'
      VpcId: !Ref rVPC
      SecurityGroupEgress:
        - Description: 'Limit egress traffic'
          CidrIp: '127.0.0.1/32'
          IpProtocol: -1
      Tags:
        - Key: Name
          Value: !Sub '${pVPCName}-sg-no-ingress-egress'
        - Key: 'workload-id'
          Value: !Ref pWorkloadIdTag
        - Key: 'environment-id'
          Value: !Ref pEnvironmentIdTag
        - Key: 'owner'
          Value: !Ref pOwnerNameTag

Outputs:

  oStackName:
    Description: 'Stack Name'
    Value: !Ref AWS::StackName

  oVPCId:
    Description: 'VPC ID'
    Value: !Ref rVPC
    Export:
      Name: !Sub '${AWS::StackName}-VPCId'

  oVPCName:
    Description: 'Name of the VPC'
    Value: !Ref pVPCName
    Export:
      Name: !Sub '${AWS::StackName}-VPCName'

  oNumberOfAZs:
    Description: 'Number of AZs'
    Value: !Ref pNumberOfAZs
    Export:
      Name: !Sub '${AWS::StackName}-NumberOfAZs'

  oAZs:
    Description: 'List of AZs'
    Value:
      !Join
        - ','
        - - !Select [0, !GetAZs '']
          - !If [ cIs2ndAZEnabled, !Select [1, !GetAZs ''], !Ref 'AWS::NoValue' ]
          - !If [ cIs3rdAZEnabled, !Select [2, !GetAZs ''], !Ref 'AWS::NoValue' ]
    Export:
      Name: !Sub '${AWS::StackName}-AZs'

  oIPv4CidrBlock:
    Description: 'VPC IPv4 CIDR Block'
    Value: !GetAtt 'rVPC.CidrBlock'
    Export:
      Name: !Sub '${AWS::StackName}-IPv4CidrBlock'

  oIPv6CidrBlock:
    Description: 'VPC IPv6 CIDR Block'
    Value: !Select [ 0, !GetAtt 'rVPC.Ipv6CidrBlocks' ]
    Export:
      Name: !Sub '${AWS::StackName}-IPv6CidrBlock'

  oPublicSubnets:
    Description: 'Public Subnets'
    Value:
      !Join
        - ','
        - - !Ref rSubnetPublicA
          - !If [ cIs2ndAZEnabled, !Ref rSubnetPublicB, !Ref 'AWS::NoValue' ]
          - !If [ cIs3rdAZEnabled, !Ref rSubnetPublicC, !Ref 'AWS::NoValue' ]
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnets'

  oPrivateSubnetsTier1:
    Description: 'Private Subnets'
    Value:
      !Join
        - ','
        - - !Ref rSubnetPrivateA1
          - !If [ cIs2ndAZEnabled, !Ref rSubnetPrivateB1, !Ref 'AWS::NoValue' ]
          - !If [ cIs3rdAZEnabled, !Ref rSubnetPrivateC1, !Ref 'AWS::NoValue' ]
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnetsTier1'

  oPrivateSubnetsTier2:
    Description: 'Private Subnets'
    Value:
      !Join
        - ','
        - - !If [ cIs2ndPrivateTier1stAZEnabled, !Ref rSubnetPrivateA2, !Ref 'AWS::NoValue' ]
          - !If [ cIs2ndPrivateTier2ndAZEnabled, !Ref rSubnetPrivateB2, !Ref 'AWS::NoValue' ]
          - !If [ cIs2ndPrivateTier3rdAZEnabled, !Ref rSubnetPrivateC2, !Ref 'AWS::NoValue' ]
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnetsTier2'

  oSubnetPublicA:
    Description: 'Public Subnet A'
    Value: !Ref rSubnetPublicA
    Export:
      Name: !Sub '${AWS::StackName}-SubnetPublicA'

  oSubnetPublicB:
    Condition: cIs2ndAZEnabled
    Description: 'Public Subnet B'
    Value: !Ref rSubnetPublicB
    Export:
      Name: !Sub '${AWS::StackName}-SubnetPublicB'

  oSubnetPublicC:
    Condition: cIs3rdAZEnabled
    Description: 'Public Subnet B'
    Value: !Ref rSubnetPublicC
    Export:
      Name: !Sub '${AWS::StackName}-SubnetPublicC'

  oSubnetPrivateA1:
    Description: '1st Tier Private Subnet A'
    Value: !Ref rSubnetPrivateA1
    Export:
      Name: !Sub '${AWS::StackName}-SubnetPrivateA1'

  oSubnetPrivateB1:
    Condition: cIs2ndAZEnabled
    Description: '1st Tier Private Subnet B'
    Value: !Ref rSubnetPrivateB1
    Export:
      Name: !Sub '${AWS::StackName}-SubnetPrivateB1'

  oSubnetPrivateC1:
    Condition: cIs3rdAZEnabled
    Description: '1st Tier Private Subnet C'
    Value: !Ref rSubnetPrivateC1
    Export:
      Name: !Sub '${AWS::StackName}-SubnetPrivateC1'

  oSubnetPrivateA2:
    Condition: cIs2ndPrivateTier1stAZEnabled
    Description: '2nd Tier Private Subnet A'
    Value: !Ref rSubnetPrivateA2
    Export:
      Name: !Sub '${AWS::StackName}-SubnetPrivateA2'

  oSubnetPrivateB2:
    Condition: cIs2ndPrivateTier2ndAZEnabled
    Description: '2nd Tier Private Subnet B'
    Value: !Ref rSubnetPrivateB2
    Export:
      Name: !Sub '${AWS::StackName}-SubnetPrivateB2'

  oSubnetPrivateC2:
    Condition: cIs2ndPrivateTier3rdAZEnabled
    Description: '2nd Tier Private Subnet C'
    Value: !Ref rSubnetPrivateC2
    Export:
      Name: !Sub '${AWS::StackName}-SubnetPrivateC2'

  oRouteTablePublicA:
    Description: 'Public Subnet A Route Table'
    Value: !Ref rRouteTablePublicA
    Export:
      Name: !Sub '${AWS::StackName}-RouteTablePublicA'

  oRouteTablePublicB:
    Condition: cIs2ndAZEnabled
    Description: 'Public Subnet B Route Table'
    Value: !Ref rRouteTablePublicB
    Export:
      Name: !Sub '${AWS::StackName}-RouteTablePublicB'

  oRouteTablePublicC:
    Condition: cIs3rdAZEnabled
    Description: 'Public Subnet C Route Table'
    Value: !Ref rRouteTablePublicC
    Export:
      Name: !Sub '${AWS::StackName}-RouteTablePublicC'

  oRouteTablePrivateA1:
    Description: '1st Tier Private Subnet A Route Table'
    Value: !Ref rRouteTablePrivateA1
    Export:
      Name: !Sub '${AWS::StackName}-RouteTablePrivateA1'

  oRouteTablePrivateB1:
    Condition: cIs2ndAZEnabled
    Description: '1st Tier Private Subnet B Route Table'
    Value: !Ref rRouteTablePrivateB1
    Export:
      Name: !Sub '${AWS::StackName}-RouteTablePrivateB1'

  oRouteTablePrivateC1:
    Condition: cIs3rdAZEnabled
    Description: '1st Tier Private Subnet C Route Table'
    Value: !Ref rRouteTablePrivateC1
    Export:
      Name: !Sub '${AWS::StackName}-RouteTablePrivateC1'

  oTemplateVersion:
    Description: 'Template version'
    Value: '2.0.3'
